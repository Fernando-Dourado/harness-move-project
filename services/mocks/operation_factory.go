// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	services "github.com/Fernando-Dourado/harness-move-project/services"
	mock "github.com/stretchr/testify/mock"
)

// OperationFactory is an autogenerated mock type for the OperationFactory type
type OperationFactory struct {
	mock.Mock
}

// NewProjectOperation provides a mock function with given fields: sourceApi, targetApi, st
func (_m *OperationFactory) NewProjectOperation(sourceApi *services.SourceRequest, targetApi *services.TargetRequest, st *services.SourceTarget) services.ProjectContext {
	ret := _m.Called(sourceApi, targetApi, st)

	if len(ret) == 0 {
		panic("no return value specified for NewProjectOperation")
	}

	var r0 services.ProjectContext
	if rf, ok := ret.Get(0).(func(*services.SourceRequest, *services.TargetRequest, *services.SourceTarget) services.ProjectContext); ok {
		r0 = rf(sourceApi, targetApi, st)
	} else {
		r0 = ret.Get(0).(services.ProjectContext)
	}

	return r0
}

// NewVariableOperation provides a mock function with given fields: sourceApi, targetApi, st
func (_m *OperationFactory) NewVariableOperation(sourceApi *services.SourceRequest, targetApi *services.TargetRequest, st *services.SourceTarget) services.VariableContext {
	ret := _m.Called(sourceApi, targetApi, st)

	if len(ret) == 0 {
		panic("no return value specified for NewVariableOperation")
	}

	var r0 services.VariableContext
	if rf, ok := ret.Get(0).(func(*services.SourceRequest, *services.TargetRequest, *services.SourceTarget) services.VariableContext); ok {
		r0 = rf(sourceApi, targetApi, st)
	} else {
		r0 = ret.Get(0).(services.VariableContext)
	}

	return r0
}

// NewOperationFactory creates a new instance of OperationFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOperationFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *OperationFactory {
	mock := &OperationFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
